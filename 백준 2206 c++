#include <iostream>
#include <queue>
#define MAX 1001
using namespace std;

int arr [MAX][MAX][2];
int dxy[4][2]={{-1,0},{0,1},{1,0},{0,-1}};
int N,M;

int bfs(){
  queue <pair<int,pair<int,int>>>q;
  q.push({0,{0,0}});
  
  while(!q.empty()){
    int broken = q.front().first;
    int m=q.front().second.first;
    int n=q.front().second.second;
    q.pop();
    
    if(m==N-1 && n ==M-1){
      return arr[N-1][M-1][broken]+1;
    }
    
    for(int i=0;i<4;i++){
      int mm = m+dxy[i][0];
      int nn = n+dxy[i][1];
      if(0>mm || 0>nn || mm>=N || nn>=M ) continue;
      if(arr[mm][nn][0]==1){
        if(!broken){
          arr[mm][nn][broken+1] = arr[m][n][broken]+1;
          q.push({1,{mm,nn}});
        }
        
      }
      else if(arr[mm][nn][0]==0){
        if(broken == 1 && arr[mm][nn][broken]) continue;
        arr[mm][nn][broken] = arr[m][n][broken]+1;
        q.push({broken,{mm,nn}});
      }
           

    }
  }
  return -1;
  
}





int main(){
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  cin>>N>>M;
  for(int i=0;i<N;i++){
    string s;
    cin>>s;
    for(int j=0;j<s.length();j++){
      arr[i][j][0]=s[j]-'0';
      
    }
  
  }
  cout<<bfs();
  return 0;
}
