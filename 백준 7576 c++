#include <iostream>
#include <queue>
#include <algorithm>
#define MAX 1001
using namespace std;

int arr[MAX][MAX];
bool visit[MAX][MAX];
int dist[MAX][MAX];
int N, M;

int x[4]={-1,0,1,0};
int y[4]={0,1,0,-1};

queue <pair<int, int>> q;

void bfs(){

  while(!q.empty()){
    int m = q.front().first;
    int n = q.front().second;
    
    q.pop();
    
    for(int i=0; i<4; i++){
      int xx = m+x[i];
      int yy = n+y[i];

      if(xx<0 || xx>=N || yy<0 || yy>=M ) continue;
      if(arr[xx][yy]==0){
        arr[xx][yy] = arr[m][n]+1;
        q.push(make_pair(xx,yy));
      
      }
    
    }
        
        
    
  }
    
}

int main()
{
  ios::sync_with_stdio(false);
  cin.tie(NULL), cout.tie(nullptr);

  int day=-1;
   
  cin>>M>>N;
  for(int i=0;i<N;i++){
    for(int j=0;j<M;j++){
      cin>>arr[i][j];
      if(arr[i][j]==1){
        q.push(make_pair(i,j));
      }
    }
  }
  
  
  bfs();

  for(int i=0;i<N;i++){
    for(int j=0;j<M;j++){
      if(arr[i][j]==0) {
        cout<<-1;
        return 0;
      }
      else  day=max(day,arr[i][j]);
        
    }
  }
  cout<<day-1;
  return 0;
}

  
